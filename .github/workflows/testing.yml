name: Tests

on:
  pull_request_target:
    types:
      - opened
      - edited
    paths:
      - ytdl_api/**
      - tests/**
      - pyproject.toml
      - poetry.lock
      

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Install ffmpeg
        run: sudo apt install ffmpeg -y
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: '3.10'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #    run test suite and output coverage file
      #----------------------------------------------
      - name: Run Pytest 
        env:
            DATASOURCE__DETA_KEY: ${{secrets.DATASOURCE__DETA_KEY}}
            STORAGE__DETA_KEY: ${{secrets.STORAGE__DETA_KEY}}
            STORAGE__DETA_DRIVE_NAME: ${{secrets.STORAGE__DETA_DRIVE_NAME}}
        run: poetry run pytest --cov=${{ github.workspace }} --cov-report=xml
      #----------------------------------------------
      #             upload coverage stats
      # (requires CODECOV_TOKEN in repository secrets)
      #----------------------------------------------
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true